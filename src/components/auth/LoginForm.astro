<form id="loginForm" class="space-y-6">
  <h1 class="text-2xl font-bold text-center text-white mb-8">Logga in</h1>
  
  <div>
    <label for="email" class="block text-sm font-medium text-white">E-postadress</label>
    <input 
      type="email" 
      id="email" 
      name="email" 
      required 
      class="mt-1 block w-full rounded-md border-white/20 bg-white/10 text-white shadow-sm backdrop-blur-sm focus:border-white focus:ring-white focus:bg-white/20 transition-all duration-200"
    />
  </div>

  <div>
    <label for="password" class="block text-sm font-medium text-white">Lösenord</label>
    <input 
      type="password" 
      id="password" 
      name="password" 
      required 
      class="mt-1 block w-full rounded-md border-white/20 bg-white/10 text-white shadow-sm backdrop-blur-sm focus:border-white focus:ring-white focus:bg-white/20 transition-all duration-200"
    />
  </div>

  <div id="error-message" class="hidden text-red-400 text-sm text-center"></div>

  <button 
    type="submit" 
    class="w-full flex justify-center py-2 px-4 border border-white/20 rounded-md shadow-sm text-sm font-medium text-white bg-white/10 hover:bg-white/20 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-white/50 backdrop-blur-sm transition-all duration-200 hover:scale-[1.02]"
  >
    Logga in
  </button>

  <div class="text-sm text-center">
    <a href="/register" class="font-medium text-white hover:text-white/80 transition-colors">
      Har du inget konto? Registrera dig här
    </a>
  </div>

  <div class="text-sm text-center">
    <a href="../" class="font-medium text-white hover:text-white/80 transition-colors">
      Tillbaka
    </a>
  </div>
</form>

<script>
  const form = document.getElementById('loginForm');
  const errorMessage = document.getElementById('error-message');
  const submitButton = form?.querySelector('button[type="submit"]');

  const showError = (message) => {
    if (errorMessage) {
      errorMessage.textContent = message;
      errorMessage.classList.remove('hidden');
    }
  };

  const hideError = () => {
    if (errorMessage) {
      errorMessage.classList.add('hidden');
    }
  };

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    hideError();

    if (submitButton) {
      submitButton.disabled = true;
      submitButton.textContent = 'Loggar in...';
    }

    try {
      const formData = new FormData(e.target);
      
      const supabase = window.supabase.createClient(
        import.meta.env.PUBLIC_SUPABASE_URL,
        import.meta.env.PUBLIC_SUPABASE_ANON_KEY
      );

      const { error } = await supabase.auth.signInWithPassword({
        email: formData.get('email'),
        password: formData.get('password')
      });

      if (error) {
        throw error;
      }

      window.location.href = '/dashboard';
    } catch (error) {
      showError(error.message);
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.textContent = 'Logga in';
      }
    }
  });
</script>
---
import Layout from '../../../layouts/DashboardLayout.astro';
import AddProductForm from '../../../components/inventory/AddProductForm.astro';

const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
---

<Layout title="Inventering">
 <!-- Stats and Search Bar -->
 <div class="space-y-4 mb-6">
   <div class="flex items-center justify-between gap-4 flex-wrap">
     <div class="flex gap-4">
       <div class="bg-white p-3 rounded-lg shadow-sm">
         <p class="text-sm text-gray-600">Olika produkter</p>
         <p class="text-xl font-semibold text-primary" id="totalProducts">0</p>
       </div>
       <div class="bg-white p-3 rounded-lg shadow-sm">
         <p class="text-sm text-gray-600">Platser</p>
         <p class="text-xl font-semibold text-primary" id="totalLocations">0</p>
       </div>
     </div>

     <div class="flex gap-2">
       <button id="addProductButton"
         class="bg-primary text-white px-4 py-2 rounded-lg hover:bg-primary/90 flex items-center gap-2"
       >
         <span>Lägg till produkt</span>
         <span class="text-lg">+</span>
       </button>
       <a href="/dashboard/inventory/restock"
         class="bg-white border border-gray-200 px-4 py-2 rounded-lg hover:bg-gray-50 flex items-center gap-2"
       >
         <span>Inköpslista</span>
         <span class="px-2 py-0.5 rounded-full bg-red-100 text-red-800 text-sm" id="needsRestock">0</span>
       </a>
     </div>
   </div>

   <!-- Search Bar -->
   <div class="relative">
     <input 
       type="text" 
       id="searchProducts"
       placeholder="Sök produkt..."
       class="w-full p-3 bg-white rounded-lg border border-gray-200 pl-10 focus:border-primary focus:ring-primary"
     />
     <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400 absolute left-3 top-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
       <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
     </svg>
   </div>
 </div>

 <div class="flex flex-wrap gap-2 mb-4" id="locationFilters">
   <!-- Location filters will be rendered here -->
 </div>

 <!-- Product List -->
 <div class="hidden md:block"> <!-- Desktop Layout -->
   <div class="bg-white rounded-lg shadow-sm">
     <div class="p-6 border-b border-gray-200">
       <h2 class="text-lg font-semibold text-gray-900">Produkter</h2>
     </div>
     <div class="overflow-x-auto">
       <table class="w-full">
         <thead class="bg-gray-50">
           <tr>
             <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Produkt</th>
             <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Plats</th>
             <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">Antal</th>
             <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">Varningsnivå</th>
             <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">Status</th>
             <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">Åtgärder</th>
           </tr>
         </thead>
         <tbody id="productsListDesktop" class="divide-y divide-gray-200">
           <!-- Desktop products will be rendered here -->
         </tbody>
       </table>
     </div>
   </div>
 </div>

 <div class="md:hidden"> <!-- Mobile Layout -->
   <div id="productsListMobile" class="space-y-4">
     <!-- Mobile products will be rendered here -->
   </div>
 </div>

 <AddProductForm />
</Layout>

<script define:vars={{ supabaseUrl, supabaseKey }}>
window.addEventListener('load', () => {
 const supabase = window.supabase.createClient(supabaseUrl, supabaseKey);
 let selectedLocations = new Set();
 let products = [];
 let filteredProducts = [];
 let locations = [];

 const loadLocations = async () => {
   const { data: locationsData, error } = await supabase
     .from('locations')
     .select('*')
     .order('name');
   
   if (!error && locationsData) {
     locations = locationsData;
     return locationsData;
   }
   return [];
 };

 // Add Product button handler
 document.getElementById('addProductButton')?.addEventListener('click', () => {
   const modal = document.getElementById('addProductModal');
   modal?.classList.remove('hidden');
 });

 // Search handler
 const searchInput = document.getElementById('searchProducts');
 searchInput?.addEventListener('input', (e) => {
   const searchTerm = e.target.value.toLowerCase();
   
   if (!searchTerm) {
     filteredProducts = products;
   } else {
     filteredProducts = products.filter(product => {
       const searchString = `${product.name} ${product.location || ''}`.toLowerCase();
       return searchTerm.split('').every(char => searchString.includes(char));
     });
   }
   
   updateProductsList();
 });

 window.deleteLocation = async (locationName) => {
   const dialog = document.createElement('div');
   dialog.innerHTML = `
     <div class="fixed inset-0 bg-gray-900/70 backdrop-blur-sm flex items-center justify-center z-50 p-4">
       <div class="bg-white rounded-xl shadow-xl max-w-sm w-full p-6">
         <div class="flex items-center mb-4">
           <div class="bg-red-100 p-2 rounded-full mr-3">
             <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
             </svg>
           </div>
           <h3 class="text-lg font-semibold text-gray-900">Ta bort plats</h3>
         </div>
         <p class="text-gray-600 mb-6">Är du säker på att du vill ta bort platsen "${locationName}"? Detta går inte att ångra.</p>
         <div class="flex justify-end gap-3">
           <button 
             onclick="this.closest('.fixed').remove()"
             class="px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors duration-200"
           >
             Avbryt
           </button>
           <button 
             onclick="handleDeleteLocation('${locationName}', this)"
             class="px-4 py-2 text-white bg-red-600 hover:bg-red-700 rounded-lg transition-colors duration-200"
           >
             Ta bort
           </button>
         </div>
       </div>
     </div>
   `;
   document.body.appendChild(dialog);
 };

 window.handleDeleteLocation = async (locationName, button) => {
   try {
     const { data: { session } } = await supabase.auth.getSession();
     if (!session) throw new Error('Ingen aktiv session');

     await supabase
       .from('products')
       .update({ location: null })
       .eq('location', locationName)
       .eq('user_id', session.user.id);

     await supabase
       .from('locations')
       .delete()
       .eq('name', locationName)
       .eq('user_id', session.user.id);

     button.closest('.fixed').remove();
     selectedLocations.delete(locationName);
     await loadData();
   } catch (error) {
     console.error('Error:', error);
     alert('Ett fel uppstod: ' + error.message);
   }
 };

 window.editProduct = async (id) => {
   const { data: product, error } = await supabase
     .from('products')
     .select('*')
     .eq('id', id)
     .single();

   if (product) {
     const modal = document.getElementById('addProductModal');
     const form = document.getElementById('addProductForm');
     const modalTitle = document.getElementById('modalTitle');
     const productId = document.getElementById('productId');
     const locationToggle = document.getElementById('useLocation');
     const locationFields = document.getElementById('locationFields');
     const locationInput = document.getElementById('locationInput');

     modalTitle.textContent = 'Redigera produkt';
     productId.value = id;

     form.querySelector('[name="productName"]').value = product.name;
     form.querySelector('[name="currentQuantity"]').value = product.quantity;
     form.querySelector('[name="warningLevel"]').value = product.warning_level;
     form.querySelector('[name="restockAmount"]').value = product.restock_amount;
     form.querySelector('[name="enableWarnings"]').checked = product.warnings_enabled;

     if (product.location) {
       locationToggle.checked = true;
       locationFields.classList.remove('hidden');
       locationInput.value = product.location;
     } else {
       locationToggle.checked = false;
       locationFields.classList.add('hidden');
       locationInput.value = '';
     }

     modal.classList.remove('hidden');
   }
 };

 const loadData = async () => {
   await loadLocations();
   updateLocationFilters();
   await loadProducts();
 };

 const loadProducts = async () => {
   let query = supabase.from('products').select('*');
   
   if (selectedLocations.size > 0) {
     if (selectedLocations.has('none')) {
       query = query.is('location', null);
     } else {
       query = query.in('location', Array.from(selectedLocations));
     }
   }

   const { data, error } = await query.order('name');
   
   if (data) {
     products = data;
     filteredProducts = data;
     updateProductsList();
     updateStats();
   }
 };

 const updateLocationFilters = () => {
   const container = document.getElementById('locationFilters');
   const allLocations = ['all', 'none', ...locations.map(loc => loc.name)];
   
   container.innerHTML = allLocations.map(loc => {
     const isSelected = selectedLocations.has(loc);
     const isAll = loc === 'all';
     const isNone = loc === 'none';
     
     return `
       <button
         data-location="${loc}"
         class="px-3 py-1 rounded-full text-sm font-medium relative group
           ${isSelected 
             ? 'bg-primary text-white' 
             : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
           } transition-colors"
       >
         ${isAll ? 'Alla' : isNone ? 'Utan plats' : loc}
         ${!isAll && !isNone ? `
           <span class="absolute hidden group-hover:inline-flex -right-1 -top-1 h-4 w-4 items-center justify-center bg-red-100 text-red-600 rounded-full cursor-pointer hover:bg-red-200"
                 onclick="deleteLocation('${loc}')">
             &times;
           </span>
         ` : ''}
       </button>
     `;
   }).join('');

   container.querySelectorAll('button').forEach(btn => {
     btn.addEventListener('click', (e) => {
       if (e.target.closest('.group-hover\\:inline-flex')) return;
       
       const location = btn.dataset.location;
       if (location === 'all') {
         selectedLocations.clear();
       } else {
         if (selectedLocations.has('all')) {
           selectedLocations.delete('all');
         }
         if (selectedLocations.has(location)) {
           selectedLocations.delete(location);
         } else {
           selectedLocations.add(location);
         }
       }
       updateLocationFilters();
       loadProducts();
     });
   });
 };

 const updateProductsList = () => {
   updateDesktopList();
   updateMobileList();
 };

  const updateDesktopList = () => {
  const container = document.getElementById('productsListDesktop');
  if (!container) return;

  if (filteredProducts.length === 0) {
    container.innerHTML = `
      <tr>
        <td colspan="6" class="px-6 py-4 text-center text-gray-500">
          ${products.length === 0 ? 'Inga produkter tillagda än' : 'Inga matchande produkter'}
        </td>
      </tr>
    `;
    return;
  }

  container.innerHTML = filteredProducts.map(product => `
    <tr>
      <td class="px-6 py-4 whitespace-nowrap">${product.name}</td>
      <td class="px-6 py-4 whitespace-nowrap">${product.location || '-'}</td>
      <td class="px-6 py-4 whitespace-nowrap text-center">
        <div class="flex items-center justify-center gap-2">
          <button onclick="updateQuantity('${product.id}', ${product.quantity - 1})" class="text-gray-500 hover:bg-gray-100 p-1 rounded">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"/>
            </svg>
          </button>
          <input type="number" value="${product.quantity}" min="0" 
            class="w-16 text-center border-gray-300 rounded-md focus:border-primary focus:ring-primary"
            onchange="updateQuantity('${product.id}', parseInt(this.value))" />
          <button onclick="updateQuantity('${product.id}', ${product.quantity + 1})" class="text-gray-500 hover:bg-gray-100 p-1 rounded">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
            </svg>
          </button>
        </div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-center">${product.warning_level}</td>
      <td class="px-6 py-4 whitespace-nowrap text-center">
        ${product.quantity <= product.warning_level ? 
          '<span class="px-2 py-1 text-xs rounded-full bg-red-100 text-red-800">Lågt lager</span>' : 
          '<span class="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">OK</span>'}
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-right">
        <div class="flex justify-end gap-2">
          <button onclick="editProduct('${product.id}')" class="text-blue-600 hover:text-blue-800">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"/>
            </svg>
          </button>
          <button onclick="deleteProduct('${product.id}')" class="text-red-600 hover:text-red-800">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"/>
            </svg>
          </button>
        </div>
      </td>
    </tr>
  `).join('');
  };

  const updateMobileList = () => {
  const container = document.getElementById('productsListMobile');
  if (!container) return;

  if (filteredProducts.length === 0) {
    container.innerHTML = `
      <div class="text-center text-gray-500 py-4">
        ${products.length === 0 ? 'Inga produkter tillagda än' : 'Inga matchande produkter'}
      </div>
    `;
    return;
  }

  container.innerHTML = filteredProducts.map(product => `
    <div class="p-4 bg-white rounded-lg shadow-sm">
      <div class="flex justify-between items-start mb-4">
        <div>
          <h3 class="font-medium text-gray-900">${product.name}</h3>
          <p class="text-sm text-gray-600">${product.location || '-'}</p>
        </div>
        <div class="flex gap-2">
          <button onclick="editProduct('${product.id}')" class="text-blue-600">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"/>
            </svg>
          </button>
          <button onclick="deleteProduct('${product.id}')" class="text-red-600">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"/>
            </svg>
          </button>
        </div>
      </div>
      <div class="flex items-center justify-between">
        <div class="flex items-center gap-2">
          <button onclick="updateQuantity('${product.id}', ${product.quantity - 1})" class="p-2 rounded-lg hover:bg-gray-100">
            <svg class="w-6 h-6 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"/>
            </svg>
          </button>
          <input type="number" value="${product.quantity}" min="0"
            class="w-16 text-center border-gray-300 rounded-lg focus:border-primary focus:ring-primary"
            onchange="updateQuantity('${product.id}', parseInt(this.value))" />
          <button onclick="updateQuantity('${product.id}', ${product.quantity + 1})" class="p-2 rounded-lg hover:bg-gray-100">
            <svg class="w-6 h-6 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
            </svg>
          </button>
        </div>
        ${product.quantity <= product.warning_level ? 
          '<span class="text-sm text-red-600">Lågt lager</span>' : ''}
      </div>
    </div>
  `).join('');
  };

  const updateStats = () => {
  document.getElementById('totalProducts').textContent = products.length;
  document.getElementById('needsRestock').textContent = 
    products.filter(p => p.quantity <= p.warning_level).length;
  document.getElementById('totalLocations').textContent = locations.length;
  };

  window.updateQuantity = async (id, newQuantity) => {
  if (newQuantity < 0) return;
  
  const { error } = await supabase
    .from('products')
    .update({ quantity: newQuantity })
    .eq('id', id);

  if (!error) {
    loadProducts();
  }
  };

  window.deleteProduct = (id) => {
  const dialog = document.createElement('div');
  dialog.innerHTML = `
    <div class="fixed inset-0 bg-gray-900/70 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div class="bg-white rounded-xl shadow-xl max-w-sm w-full p-6">
        <div class="flex items-center mb-4">
          <div class="bg-red-100 p-2 rounded-full mr-3">
            <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
          </div>
          <h3 class="text-lg font-semibold text-gray-900">Ta bort produkt</h3>
        </div>
        <p class="text-gray-600 mb-6">Är du säker på att du vill ta bort denna produkt? Detta går inte att ångra.</p>
        <div class="flex justify-end gap-3">
          <button 
            onclick="this.closest('.fixed').remove()"
            class="px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors duration-200"
          >
            Avbryt
          </button>
          <button 
            onclick="handleDeleteProduct('${id}', this)"
            class="px-4 py-2 text-white bg-red-600 hover:bg-red-700 rounded-lg transition-colors duration-200"
          >
            Ta bort
          </button>
        </div>
      </div>
    </div>
  `;
  document.body.appendChild(dialog);
  };

  window.handleDeleteProduct = async (id, button) => {
  try {
    const { error } = await supabase
      .from('products')
      .delete()
      .eq('id', id);

    if (error) throw error;
    
    button.closest('.fixed').remove();
    loadProducts();
  } catch (error) {
    console.error('Error:', error);
    alert('Ett fel uppstod: ' + error.message);
  }
  };

  // Initial load
  loadData();
  });
</script>